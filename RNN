import pandas as pd
import numpy as np
import math
from tensorflow.keras.preprocessing import text_dataset_from_directory
from keras.utils import to_categorical
from sklearn.model_selection import KFold, StratifiedKFold, cross_val_score, cross_val_predict
from scikeras.wrappers import KerasClassifier
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, SimpleRNN
from keras.layers import LSTM, Dense, Activation, Dropout, BatchNormalization

seed = 7
np.random.seed(seed)

training = pd.read_csv('training.csv')
test = pd.read_csv('test.csv')

training_weights = training.copy()[["Weight"]]
training_labels = training.copy()[["Label"]]
training_labels.replace(('b', 's'), (0, 1), inplace=True)

# select input features
training_data = training.copy().drop(columns=["EventId", "Weight", "Label"])
test_data = test.copy().drop(columns=["EventId"])

training_data.replace(-999, 0, inplace=True)

def AMS(s, b):
    assert s >= 0
    assert b >= 0
    bReg = 10.0
    return math.sqrt(2 * ((s + b + bReg) * math.log(1 + s / (b + bReg)) - s))
def create_model():
    model = Sequential()
    model.add(LSTM(units=256, return_sequences=False, input_shape=(training_data.shape[1], 1), unroll=True))
    model.add(BatchNormalization())
    model.add(Dense(128, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(2, activation='softmax'))


    model.compile(loss='categorical_crossentropy',
                  optimizer='adam',
                  metrics=['accuracy']
    )
    return model

model = KerasClassifier(model=create_model, epochs=10, batch_size=64, verbose=1)
kfold = KFold(n_splits=5, shuffle=True, random_state=seed)

results = cross_val_predict(model, training_data, y=to_categorical(training_labels), cv=kfold)
print(results)

s_list = [i for i, prediction in enumerate(results) if prediction.tolist() == [0, 1]]
s = sum(training_weights["Weight"][i] for i in s_list if training_labels["Label"][i] == 1) # sum of all weights predicted as s that are actually s
b = sum(training_weights["Weight"][i] for i in s_list if training_labels["Label"][i] == 0) # sum of all weights predicted as s that are actually b
ams_score = AMS(s, b)
print(ams_score)
